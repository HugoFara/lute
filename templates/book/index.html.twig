{% extends 'base.html.twig' %}

{% block title %}Books{% endblock %}

{% block body %}

<h1>{{ status }} Book index</h1>

<table id="booktable" class="table dataTable stripe" style="table-layout:fixed;" >
  <thead>
    <tr>
      <th>Title</th>
      <th>Language</th>
      <th>Tags</th>
      <th>Word count</th>
      <th title="Unknown, learn 1-2, learn 3-4, learn 5.">Stats</th>
      <th>Actions</th>
    </tr>
  </thead>
  <tfoot>
    <tr>
      <th>Title</th>
      <th>Language</th>
      <th>Tags</th>
      <th>Word count</th>
      <th>Stats</th>
      <th>Actions</th>
    </tr>
  </tfoot>

</table>

{% if status == 'Active' %}
<a href="{{ path('app_book_new') }}">Create new</a>
{% endif %}

{# Hidden form for archive, unarchive, delete. #}
<form id="actionposter" method="post" action="">
</form>

<script>
  
  let setup_text_datatable = function(initial_search) {
    var table = $('#booktable').DataTable({
      responsive: true,
      select: true,
      lengthMenu: [ 25, 50 ],
      paging: true,
      info: true,
      searching: true,
      processing: true,
      serverSide: true,
      search: { search: initial_search },
      columnDefs: [
        // "name" is the column name in your main SQL query.
        // If the "name" is blank, it's not considered in the SQL query.  This is useful for fields that aren't exact maps of SQL columns (e.g. for rendered cells.)
        // The fields in each row in the data ajax response are ordered as they are declared here.
        // All fields default to "orderable" = true, "searchable" = true.
        {
          "name": "BkTitle", "targets": 0,
          "render": function ( data, type, row, meta ) {
            return `<a href="/book/read/${row[5]}">${row[0]}</a>`;
          }
        },
        { "name": "LgName", "targets": 1 },
        { "name": "TagList", "targets": 2 },
        { "name": "WordCount", "targets": 3 },
        {
          "name": "TermStats",
          "targets": 4,
          "searchable": false,
          "orderable": false,
          "render": function ( data, type, row, meta ) {
            // columns are defined below.
            let mkspan = (col, style) => row[col] == null ? '' : `<span class="${style}">${row[col]}</span>`;
            const arr = [
              mkspan(7, 'status0'),
              mkspan(8, 'status1'),
              mkspan(9, 'status3'),
              mkspan(10, 'status5')
            ];
            return arr.join(' ');
          }
        },
        {
          "targets": 5,
          "data": null,
          "searchable": false,
          "orderable": false,
          "render": function ( data, type, row, meta ) {
            return ''; // TODO:book_archive_delete

            // TODO:security - add CSRF token
            let ret = '';
            const txid = row[5];
            if (row[6] == 0) {
              // not archived
              ret += `<img src="/icn/inbox-download.png" title="Archive" onclick="confirm_archive(${txid})" />`;
            }
            else {
              ret += `<img src="/icn/inbox-upload.png" title="Unarchive" onclick="confirm_unarchive(${txid})" />`;
            }
            ret += `<img src="/icn/minus-button.png" title="Delete" onclick="confirm_delete(${txid})" />`;
            return ret;
          }
        },

        /* Extra data that is returned in the row for rendering, but not shown. */
        { "name": "BkID", "targets": 6, "data": null, "visible": false },
        { "name": "BkArchived", "targets": 7, "data": null, "visible": false },
        { "name": "Unknown", "targets": 8, "data": null, "visible": false },
        { "name": "Learn1_2", "targets": 9, "data": null, "visible": false },
        { "name": "Learn3_4", "targets": 10, "data": null, "visible": false },
        { "name": "Learn5", "targets": 11, "data": null, "visible": false }
      ],

      // Ajax call
      ajax: {
        url: '/book/datatables/{{ status | lower }}',
        type: "POST",
        dataType: "json"
      },

    });

    // TODO:fix_archived_text_layout  Archived texts don't have stats, but hiding the column messed with the layout.
    // if ('{{ status }}'.toLowerCase() == 'archived') {
    //    $('table#texttable > td:nth-child(5),th:nth-child(5)').hide();
    // }
  } // end setup_text_datatable


  $(document).ready(function () {
    setup_text_datatable("{{ initial_search ?? '' }}");
  });

  /*
  function do_action_post(action, bookid) {
    let f = $('#actionposter');
    f.attr('action', `/book/${bookid}/${action}`);
    f.submit();
  }

  function confirm_archive(bookid) {
    do_action_post('archive', bookid);
  }

  function confirm_unarchive(bookid) {
    do_action_post('unarchive', bookid);
  }

  function confirm_delete(bookid) {
    if (!confirm(`Deleting a book.  Click OK to proceed, or Cancel.`)) {
      return;
    }
    do_action_post('delete', bookid);
  }
  */

</script>

{% endblock %}
